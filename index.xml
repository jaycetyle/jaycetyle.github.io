<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jayce 的共享記憶體</title>
    <link>https://blog.jaycetyle.com/</link>
    <description>Recent content on Jayce 的共享記憶體</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 06 Oct 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.jaycetyle.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux fio 測試參數的眉眉角角</title>
      <link>https://blog.jaycetyle.com/2021/10/linux-fio-tips/</link>
      <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2021/10/linux-fio-tips/</guid>
      <description>&lt;p&gt;　　fio 是一個好用的合成 IO (Synthetic IO Workload) 產生器，我們經常用他來測試例如檔案系統或是 Disk 的 IO 效能等等，他有非常多可調參數，很多時候我們只是複製了某測試的參數就打，這在大多數情況可能是夠用的，但身為一個優秀的效能分析者，我們還是必須要知道 &amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kprobe Userspace Tool 使用筆記</title>
      <link>https://blog.jaycetyle.com/2021/10/kprobe-userspace-tool/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2021/10/kprobe-userspace-tool/</guid>
      <description>&lt;p&gt;　　kprobe 是一個輕量的 linux kernel 的除錯工具，他可以在不重新編譯核心的情況下追蹤一個函式的呼叫以及回傳，相當方便。kernel 內目前提供了三種類型的 probe，分別是 kprobe、kretprobe 以及 jprobe，三者都是基於類似的原理所實現的。&lt;/p&gt;&#xA;&lt;p&gt;　　詳細的技術原理 &amp;hellip; 我也沒弄得那麼清楚 &amp;#x1f61c;，有興趣的可以去看&lt;a href=&#34;https://www.kernel.org/doc/html/latest/trace/kprobes.html&#34;&gt;核心的技術說明手冊&lt;/a&gt;，會比我介紹清楚得多，這邊只簡單介紹好用工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel BUG_ON 傾印訊息分析及案例分享</title>
      <link>https://blog.jaycetyle.com/2019/12/linux-bug-on-case-study/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2019/12/linux-bug-on-case-study/</guid>
      <description>&lt;p&gt;　　前一陣子有追蹤一個 ARM 平台發生 Kernel BUG_ON 的問題，在同事的協助下花了一點時間終於追出可能的原因。在我剛開始接觸 Linux Kernel 時，遇到這類 log 都很不知道該如何下手，累積了一些經驗以後才慢慢知道該如何切入、分析及找出原因。&lt;/p&gt;&#xA;&lt;p&gt;　　這篇會分享實際分析 Kernel Oops log 的過程，以及相關工具的使用方式做為案例分析給各位參考。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[C&#43;&#43;] 幾種在函數傳遞 Smart Pointer 的方式整理</title>
      <link>https://blog.jaycetyle.com/2019/11/passing-smart-pointer/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2019/11/passing-smart-pointer/</guid>
      <description>&lt;p&gt;　　相較於其他程式語言，C++ 的函數參數傳遞方式有很多種方法，如傳值(value)、傳址(address/pointer)，及傳參考(reference)等，再加上 const 修飾詞後又有不同的變化。&lt;/p&gt;&#xA;&lt;p&gt;　　C++11 引入的 unique_ptr 及 shared_ptr 等智慧指標，也同樣有傳值或傳參考等方式。雖然很多手段都可以達到相同目的，但如果透過傳遞方式的不同，就可以表現出函數設計者想傳達的「語意」，那一定會是比較好的設計，同時好的設計也能借助編譯器的輔助來降低程式出錯的機會。&lt;/p&gt;&#xA;&lt;p&gt;　　針對各種不同需求及使用情境，這篇整理我蒐集到的建議實作方式，主要源自於 &lt;a href=&#34;https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines&#34;&gt;C++ Core Guideline&lt;/a&gt;，提供給各位參考。&lt;/p&gt;</description>
    </item>
    <item>
      <title>從 Jekyll 遷移到 Hugo 步驟心得分享</title>
      <link>https://blog.jaycetyle.com/2019/10/jekyll-to-hugo/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2019/10/jekyll-to-hugo/</guid>
      <description>&lt;p&gt;　　部落格從去年一月至今也快滿兩年了，中間一直有想修改部落格的樣板，經過一陣選擇與研究以後，決定連產生器也換掉試試看，於是就轉到了 Hugo。Hugo 是一個以 golang 為基礎開發的靜態網站產生器，他的建置速度很快，目前感覺他的操作指令以及目錄規劃也蠻乾淨好上手。這篇就筆記一下我從 jekyll 轉換到 hugo 的過程及一些重點。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visual Studio Code Remote - WSL 安裝教學</title>
      <link>https://blog.jaycetyle.com/2019/07/vscode-remote-wsl/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2019/07/vscode-remote-wsl/</guid>
      <description>&lt;p&gt;　　最近在思考如何讓&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=jaycetyle.vscode-gnu-global&#34;&gt;我的插件&lt;/a&gt;能夠跑在 WSL 裡面，後來發現了 &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl&#34;&gt;Visual Studio Code Remote - WSL&lt;/a&gt; 這個好東西，它可以讓 VS Code Server 實際執行在 WSL 裡面，只留 UI 介面在 Windows。&lt;/p&gt;&#xA;&lt;p&gt;　　這對某些插件非常有用，因為有些東西跑在 Linux 環境是比較容易的。另外 Visual Studio Code Remote 系列還包含 Remote - SSH 模式，這東西就更猛了，如果你的 Build Machine 是遠端的 Linux Server ，他可以直接透過 SSH 跑在 Linux Server 端，像是檔案搜尋等動作，直接執行在遠端 Linux 就會比透過 Samba 或 NFS 快上很多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VS Code GNU Global 相依專案路徑設定</title>
      <link>https://blog.jaycetyle.com/2019/07/more-about-vscode-gnu-global/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2019/07/more-about-vscode-gnu-global/</guid>
      <description>&lt;p&gt;　　在 &lt;a href=&#34;https://blog.jaycetyle.com/2018/10/vscode-gnu-global/&#34;&gt;VS Code + GNU Global - 打造 Trace Linux Kernel 環境&lt;/a&gt; 這篇我有介紹我改造的 VS Code GNU Global 套件。當初會選擇 GNU Global 作為主要的 tagging engine，除了他的速度很快以外，還有另一個的原因是 GNU Global 具備將 tag files 分散在不同 Project 的功能，再透過相依性設定搜尋路徑。&lt;/p&gt;&#xA;&lt;p&gt;　　分散 Tag File 在某些大型專案非常有用，他可以有效加速 Tag 搜尋和更新的速度。另外他也支援將 tag files 放在專案目錄以外的地方，以下會分別介紹這兩個功能在 VS Code 中要如何設定。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 系統程式設計 - read()、write() 與 page cache</title>
      <link>https://blog.jaycetyle.com/2019/01/linux-read-write/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2019/01/linux-read-write/</guid>
      <description>&lt;p&gt;　　這篇延續 &lt;a href=&#34;https://blog.jaycetyle.com/2018/12/linux-fd-open-close/&#34;&gt;Linux 系統程式設計 - fd 及 open()、close() 系統呼叫&lt;/a&gt;，筆記 read()、write() 系統呼叫及 page cache 相關的部分。內容主要參考 &lt;a href=&#34;https://www.tenlong.com.tw/products/9789862769812&#34;&gt;Robert Love 的 Linux System Programming&lt;/a&gt; 一書。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 系統程式設計 - fd 及 open()、close() 系統呼叫</title>
      <link>https://blog.jaycetyle.com/2018/12/linux-fd-open-close/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/12/linux-fd-open-close/</guid>
      <description>&lt;p&gt;　　開始接觸 Linux Kernel 也有差不多一年的時間，最近開始有明顯地感覺到有某種瓶頸存在，仔細思考了一下覺得是底子不夠，所以決定從基礎來好好學習一下，再搭配核心程式碼來確認是否是看到的那樣。這篇主要筆記 file descriptor、open() 及 close() 系統呼叫相關的部分，主要參考 &lt;a href=&#34;https://www.tenlong.com.tw/products/9789862769812&#34;&gt;Robert Love 的 Linux System Programming&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Synology Data Scrubbing 介紹與分析</title>
      <link>https://blog.jaycetyle.com/2018/11/synology-data-scrubbing/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/11/synology-data-scrubbing/</guid>
      <description>&lt;p&gt;　　最近有人在詢問 Synology 的 Data Scrubbing 相關的問題，剛好小弟算是小有研究，因此來介紹一下何謂 Data Scrubbing（資料洗滌），以及 Synology 的 Data Scrubbing 可以為我們做些什麼？&lt;/p&gt;</description>
    </item>
    <item>
      <title>VS Code &#43; GNU Global - 打造 Trace Linux Kernel 環境</title>
      <link>https://blog.jaycetyle.com/2018/10/vscode-gnu-global/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/10/vscode-gnu-global/</guid>
      <description>&lt;p&gt;　　Linux Kernel 是一個偉大的開源專案，同時也是相當龐大的專案，要 Trace 這麼大的專案總是要準備一點輔助工具才會有效率。這篇主要介紹使用 VS Code 編輯器，加上我改的 C/C++ GNU Global 套件來 Trace Linux Kernel，對一些大型的 C/C++ 專案也適用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>更新 WSL 內的 Ubuntu 到 18.04</title>
      <link>https://blog.jaycetyle.com/2018/09/upgrade-wsl-ubuntu/</link>
      <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/09/upgrade-wsl-ubuntu/</guid>
      <description>&lt;p&gt;　　Stable Ubuntu 18.04 LTS 正式 release 以後，大家應該陸陸續續開始從 16.04 升上去了，不過 WSL (Windows Subsystem for Linux) 內的 Ubuntu 並不會自動升級，應該也有人發現 Microsoft Store 內多出了 Ubuntu 16.04 LTS 和 Ubuntu 18.04 LTS 兩個 Image，那到底該如何更新呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>[C/C&#43;&#43;] enum to string 的方法實作 (X Macro)</title>
      <link>https://blog.jaycetyle.com/2018/09/c-xmacro/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/09/c-xmacro/</guid>
      <description>&lt;p&gt;　　相信很多人很多時候都會想要把 enum 列舉的數值轉換成 string，方便寫出檔案或顯示到 UI 上，這種轉換的方法在很多高階語言，例如 C#、Java 等都有方法直接支援，但是 C/C++ 就沒這麼方便了。以下介紹幾種在 C++ 實作 enum 轉 string 的方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux NFS filehandle 筆記</title>
      <link>https://blog.jaycetyle.com/2018/09/nfs-filehandle/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/09/nfs-filehandle/</guid>
      <description>&lt;p&gt;　　最近在看 Linux NFS 相關的程式碼，趁還有點記憶的時候來筆記一下，這篇主要筆記 NFS filehandle 的運作機制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>避免 Firefox 套用 Ubuntu 的暗色主題</title>
      <link>https://blog.jaycetyle.com/2018/07/firefox-ubuntu-dark-gtk/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/07/firefox-ubuntu-dark-gtk/</guid>
      <description>&lt;p&gt;　　因為 Chrome 記憶體吃太兇的關係，最近我改用 Firefox 瀏覽器了，用起來很順的但一直有一個問題：Firefox 似乎會吃 Ubuntu gtk theme 的顏色。這導致某些網站的文字框或下拉式選單會變成暗色，看起來很奇怪，甚至會造成瀏覽障礙，這篇筆記如何複寫 Firefox 套用到的主題顏色。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 版本控制筆記 - 將 Mercurial (hg) 轉到 github</title>
      <link>https://blog.jaycetyle.com/2018/06/hg-to-git/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/06/hg-to-git/</guid>
      <description>&lt;p&gt;　　我覺得現在的版本控制主流已經是 git 了，但有一些 Open Source 專案的版本控制會選擇用 Mercurial (hg)，這兩個版本控制系統有著不少相似的地方，都是不錯的工具。這篇主要教學如何將 hg 的專案移轉到 github 上，並保留所有的 commit 紀錄。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 類似微軟注音的輸入法 - hime 詞音輸入法</title>
      <link>https://blog.jaycetyle.com/2018/06/hime/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/06/hime/</guid>
      <description>&lt;p&gt;　　剛換到 Ubuntu 時最不習慣的就是 Ubuntu 的注音輸入法了，經過了一段時間的研究，找到了 Hime 輸入系統的詞音輸入法，用起來最接近 Windows 的微軟注音，以下介紹在 Ubuntu 18.04 中如何安裝及設定 Hime 輸入法，Ubuntu 16.04 的設定方式也是類似的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>將 Ubuntu 家目錄資料夾的語言改為英文</title>
      <link>https://blog.jaycetyle.com/2018/06/ubuntu-home-folder-lang/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/06/ubuntu-home-folder-lang/</guid>
      <description>&lt;p&gt;　　如果 Ubuntu 安裝成中文版的話，家目錄 (home) 內的資料夾名稱也會安裝成中文的，例如「桌面」、「下載」之類的，但對於經常使用 terminal 的使用者來說，要在中英文之間切換很麻煩，以下教學如何將這些目錄的名稱無痛轉換為英文。&lt;/p&gt;</description>
    </item>
    <item>
      <title>業餘自學 Machine Learning 經驗分享</title>
      <link>https://blog.jaycetyle.com/2018/05/self-learn-ml/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/05/self-learn-ml/</guid>
      <description>&lt;p&gt;　　這幾年人工智慧 (AI)、機器學習 (Machine Learning) 是非常紅的話題，這些對我來說一直就像是個黑盒子，在學校沒學過，新聞和網路上的資訊又很複雜，很容易被誤導，在今年年初的時候下定決心要來研究一下。但從學校畢業以後，要學這些新技術只能靠自己了，以下分享一些學習經驗給有興趣的&lt;strong&gt;業餘人士&lt;/strong&gt;參考，揭露 Machine Learning 的神秘面紗。&lt;/p&gt;</description>
    </item>
    <item>
      <title>升級囉！Ubuntu 18.04</title>
      <link>https://blog.jaycetyle.com/2018/04/upgrade-to-ubuntu-18-04/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/04/upgrade-to-ubuntu-18-04/</guid>
      <description>&lt;p&gt;　　Stable Ubuntu 18.04 LTS 在 4 月 26 日正式 release 了，根據歷年 Ubuntu 的習慣，這次的版本代號不意外的是 B 開頭的 Bionic Beaver (仿生河狸?)。我沒有經歷過 14.04 升 16.04 的階段，系統升級的部分據說&lt;a href=&#34;https://askubuntu.com/questions/1028624/not-able-to-upgrade-from-16-04-lts-to-18-04-lts&#34;&gt;會在第一個 patch，也就是大約一個月後釋後釋出&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;　　不過我今天沒什麼特別的事，就手動把 Ubuntu 升級了一下，反正檔案都放在電腦硬碟或&lt;a href=&#34;https://www.synology.com/zh-tw&#34;&gt;NAS&lt;/a&gt;上，環境爛掉大不了重裝一下就好。以下筆記如何手動搶先從 16.04 升級上去。&lt;/p&gt;</description>
    </item>
    <item>
      <title>機械跨軟體開發心得分享 - 入門篇</title>
      <link>https://blog.jaycetyle.com/2018/04/me-to-cs/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/04/me-to-cs/</guid>
      <description>&lt;p&gt;　　從大學到碩士一路都是機械系讀上來，畢業後經歷了幾年輾轉到了現在的工作崗位: Linux 檔案系統相關開發維護，我覺得我已經幾乎脫離原本機械系的領域。雖然我不能稱上是很厲害的軟體工程師，心裡多少也還是有點機械魂，會走到這裡也是一種機運，但我想應該不少人也會有半路想跨領域的想法，而這裡分享一些我個人的經驗以及學習歷程給一些也想跨到軟體開發的人參考。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VS Code &#43; ssh 樹莓派遠端除錯</title>
      <link>https://blog.jaycetyle.com/2018/04/vscode-ssh-debug/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/04/vscode-ssh-debug/</guid>
      <description>&lt;p&gt;　　在一個新的環境寫程式之前，我自己的習慣是一定要先摸一下除錯器 (debugger) 的使用，有好的除錯器輔助可以讓軟體開發省下非常多的時間。這篇主要筆記如何運用 VS Code 的 Native Debug 插件，直接遠端到樹莓派上面的 gdb 進行 C 語言的程式除錯，可以監控變數，設定中斷點，也可以按 F10 單步執行，對於其他 Linux 系統的 embedded system 只要能夠安裝 gdb 、 ssh 和掛載遠端目錄應該也都適用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>為 Raspberry pi 的 wlan 設定固定的區域網路 IP</title>
      <link>https://blog.jaycetyle.com/2018/03/pi-fix-wlan-ip/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/03/pi-fix-wlan-ip/</guid>
      <description>&lt;p&gt;　　我的 Raspberry pi 是透過 USB 無線網卡上網(wlan0)，但家裡 Hinet 的小烏龜如果重開，或是重新開機，IP 有可能會變，這樣子連接時就要重新設定 IP ，很麻煩！所以我小小研究了一下讓 Raspberry pi 的 wlan0 IP 可以固定的方法，蠻簡單的，以下說明設定流程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>帶著走的開發環境 - 把 Ubuntu 裝到 USB</title>
      <link>https://blog.jaycetyle.com/2018/03/ubuntu-on-usb/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/03/ubuntu-on-usb/</guid>
      <description>&lt;p&gt;　　軟體開發常常會需要 Linux 作業環境，但電腦又想裝 Windows 時候，一個常見的解決方式是在裝 Virtual Box，不過前一陣子覺得這不完全滿足我的需求，因為我有桌電和筆電兩台電腦，出門用筆電，在家用桌電，要兩台電腦共享 VM 就有一點麻煩了，後來決定直接把 Ubuntu 裝在隨身碟裡面，這樣就可以隨時切換我的開發環境，反正程式碼會丟到 github 或其他雲端，隨身碟掛了也沒損失。&lt;/p&gt;&#xA;&lt;p&gt;　　這篇簡單筆記當初怎麼安裝 Ubuntu 到 USB 內，因為當初安裝的時候沒有記得很詳細，所以僅列出主要重點。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 版本控制筆記 - 使用 github 及 ssh 金鑰設定</title>
      <link>https://blog.jaycetyle.com/2018/02/github-ssh/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/02/github-ssh/</guid>
      <description>&lt;p&gt;　　git 可以只作為個人版本控制用途，但更多的使用情況是另有一個主要的伺服器保管程式碼，這篇文章會介紹如何使用 github 這個時下最夯的 git 託管服務，將修改好的變更推送 (push) 到遠端以及拖拉 (pull) 本地端，另外也會介紹一下如何設定 ssh 金鑰，讓 github 授權上傳程式碼。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 版本控制筆記 - 在 Git 提交(commit)檔案</title>
      <link>https://blog.jaycetyle.com/2018/02/git-commit/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/02/git-commit/</guid>
      <description>&lt;p&gt;　　在&lt;a href=&#34;https://blog.jaycetyle.com/2018/02/git-startup/&#34;&gt;上一篇文章&lt;/a&gt;中我們已經架設好 git 的基本環境，現在可以來開始使用 Git 囉，這篇文章會說明如何初始化一個 Repository (Git 的儲存庫)，並提交檔案到裡面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 版本控制筆記 - Git 安裝及環境設定</title>
      <link>https://blog.jaycetyle.com/2018/02/git-startup/</link>
      <pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/02/git-startup/</guid>
      <description>&lt;p&gt;　　最近跟一些朋友聊了一下公司軟體開發的情況，發現一些傳統的公司還停留在沒有版本控制，或方法很陽春的情況，因此決定來寫一下 Git 教學筆記，一個我認為即將一統版控江湖的軟體，順便藉此機會讓自己 Git 的使用能夠更深入。這篇文章主要說明 Git 的設定，有一定程度的使用者可以快速瀏覽過去就好。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Format String 字串格式化整理</title>
      <link>https://blog.jaycetyle.com/2018/01/python-format-string/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/01/python-format-string/</guid>
      <description>&lt;p&gt;　Python 從 2.6 開始新增了 .format() 的字串格式化輸出函數，本篇筆記了各種輸出的範例&lt;/p&gt;</description>
    </item>
    <item>
      <title>寫一個簡單、通用的 Makefile</title>
      <link>https://blog.jaycetyle.com/2018/01/simple-general-makefile/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/01/simple-general-makefile/</guid>
      <description>&lt;p&gt;　　用 GCC 想要 Build Code 的話，除了直接使用 gcc 以外，再來就是寫 Makefile 了。不過很多時候只是想要寫一個簡單的測試小程式或小工具，還要重新寫 Makefile 那就顯得相當麻煩。這篇筆記了一個簡單的通用 Makefile，只需要修改少數幾個地方就可以應付規模不大的程式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Win10 安裝 Jekyll 部落格網站產生器教學</title>
      <link>https://blog.jaycetyle.com/2018/01/jekyll-on-win10/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/01/jekyll-on-win10/</guid>
      <description>&lt;p&gt;　　Jekyll 是一個非常方便的靜態部落格框架，可以讓想架部落格的人可以不受平台的限制架設網站，如果有程式基礎的話，他的靈活性也相對比部落格平台高上許多，可以自行修改成具有個人特色的網站。&lt;/p&gt;&#xA;&lt;p&gt;　　什麼是&lt;strong&gt;靜態網頁&lt;/strong&gt;呢？簡單來說就是不包含資料庫等能和使用者互動的單純網頁，這對於單一網頁不常變動的部落格來說是一個不錯的選擇，唯一的缺點是一般部落格都會需要的留言系統會需要資料庫，但這部分已經有相當多平台提供服務，像本站是使用 &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt;，其他像是 &lt;a href=&#34;https://developers.facebook.com/docs/plugins/comments?locale=zh_TW&#34;&gt;Facebook 留言外掛程式&lt;/a&gt; 也是不錯的選擇。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 Google Domains 註冊個人網域</title>
      <link>https://blog.jaycetyle.com/2018/01/google-domain/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/01/google-domain/</guid>
      <description>&lt;p&gt;　　在架設這個部落格之前，我曾經做了幾個考量，像是「我是否應該使用部落格平台」？還有「我是否應該要申請域名」？&lt;/p&gt;&#xA;&lt;p&gt;　　會有第二個考量主要來自於我打算搬遷之前的部落格，而搬遷部落格最大的問題，就是會損失好不容易建立的搜尋引擎排行。之前「大腦的外接記憶體」有不少文章用特定關鍵字去搜尋，結果會出現在第一頁，算是小有成就感，不過網址改變以後當然就只能重來。如果有心要長期經營的話，「私人域名」就顯得特別重要，有了私人域名，就算整個大改版甚至是搬移到別的平台，只要文章的網址沒有改變，其他人還是可以找得到你。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Subsystem for Linux 安裝 (Ubuntu bash)</title>
      <link>https://blog.jaycetyle.com/2018/01/win-subsys-linux/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/01/win-subsys-linux/</guid>
      <description>&lt;p&gt;　　Windows 的視窗介面很好用，不過對於開發者而言，有些工作使用命令列工具 (Command Line) 還是方便些。Windows 內建的命令列工具有命令提示字元 (cmd) 和 Power Shell，如果喜歡 Linux bash，也可以選擇 Cygwin 或 MinGW，如果有安裝過 git 的話還有 git bash。以上這些工具我都有試過，現在 &lt;strong&gt;Windows 10&lt;/strong&gt; 還有一個更方便的選擇 : Windows Subsystem for Linux (WSL)，可以讓 Ubuntu 的一些實用工具直接在此系統上原生執行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新年 新文章 新氣象</title>
      <link>https://blog.jaycetyle.com/2018/01/first-post/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2018/01/first-post/</guid>
      <description>&lt;p&gt;　　花了三個下班後的晚上，總算安置好部落格了，重啟部落格算是今年 2018 的一個小目標。上一個部落格「大腦的外接記憶體」，自認算是經營得還不錯，不少文章都有不錯的點閱率，也有獲得一點回饋，但後來忙碌怠惰了以後就一直沒有去更新他，對那些給予指教的網友們也是心有慚愧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>關於我</title>
      <link>https://blog.jaycetyle.com/about/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/about/</guid>
      <description>&lt;h2 id=&#34;lin-chieh-jayce&#34;&gt;Lin Chieh (Jayce)&lt;/h2&gt;&#xA;&lt;p&gt;　　一個熱愛程式與科技的軟體工程師，機械研究所的背景造就了一個有一點歪歪的技能樹，專長領域有設備自動化控制及 Windows 軟體開發，不過目前工作主要接觸 Linux 核心 (疑?)。&lt;/p&gt;&#xA;&lt;p&gt;　　數年的軟體開發與職涯探索了不少領域，體認到了工程師保持靈活、持續學習的重要性，只要基礎札實，各種任務都一樣能夠手到擒來。如果您有任何想討論的問題或疑問，或是想認識不帥的宅宅作者 (宅也是一種專業表現！)，都歡迎透過&lt;a href=&#34;mailto:jaycetyle@gmail.com&#34;&gt;郵件 jaycetyle@gmail.com&lt;/a&gt; 與我聯絡。&lt;/p&gt;&#xA;&lt;p&gt;　　&lt;/p&gt;&#xA;&lt;figure class=&#34;half center&#34;&gt;&#xA;&#x9;&lt;img src=&#34;https://blog.jaycetyle.com/images/avatar.jpg&#34; style=&#34;border-radius:100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;　&lt;/p&gt;&#xA;&lt;h2 id=&#34;其他網站連結&#34;&gt;其他網站連結&lt;/h2&gt;&#xA;&lt;p&gt;　　&lt;a href=&#34;https://travelpig.jaycetyle.com/&#34;&gt;&lt;strong&gt;大豬小豬趴趴走&lt;/strong&gt;&lt;/a&gt;  ：  小豬豬與 Jayce 的遊記部落格&lt;/p&gt;&#xA;&lt;p&gt;　&lt;/p&gt;</description>
    </item>
    <item>
      <title>[C#] 用 dll Reflection 做 Plugin 吧！</title>
      <link>https://blog.jaycetyle.com/2015/06/csharp-dll-plugin/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2015/06/csharp-dll-plugin/</guid>
      <description>&lt;p&gt;　　這次的內容主要介紹 C# 應用程式如何透過 dll 及反射 (Reflection) 來做 plugin，方法沒有很困難，不過一個 plugin 就是一個 dll 檔，也就等於是一個專案，所以在範例中會開蠻多專案的，手續會稍微繁複一點。現在就開始撰寫我們的範例程式吧！&lt;/p&gt;</description>
    </item>
    <item>
      <title>在 Linux 寫程式 - gcc 及 Makefile 教學筆記 (2)</title>
      <link>https://blog.jaycetyle.com/2015/01/linux-gcc-makefile-2/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2015/01/linux-gcc-makefile-2/</guid>
      <description>&lt;p&gt;　　根據之前提到的規則，我們可以讓 Makefile 再複雜一點，如下:&lt;/p&gt;</description>
    </item>
    <item>
      <title>在 Linux 寫程式 - gcc 及 Makefile 教學筆記 (1)</title>
      <link>https://blog.jaycetyle.com/2015/01/linux-gcc-makefile/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2015/01/linux-gcc-makefile/</guid>
      <description>&lt;p&gt;　　剛從 Windows 跳到 Linux 的 Programmer 應該都會跟我遇到類似的問題吧，就是 Linux 到處都是看不懂的 Makefile，畢竟 Windows 沒有這種東西，在 Windows 裡，Makefile 的工作都由 IDE 代勞了，這裡不得不說 Visual Studio 真的是很強大的整合開發環境，會寵壞小孩。但現在要進到 Linux 的領域，就勢必要搞懂這個 Makefile 在做什麼，大概怎麼寫，不然會遇到蠻多障礙，而這篇就是筆記 Makefile 的使用方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visual Studio 2013 配置 OpenCV 2.4.9 專案環境</title>
      <link>https://blog.jaycetyle.com/2014/10/visual-studio-2013-opencv/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2014/10/visual-studio-2013-opencv/</guid>
      <description>&lt;p&gt;　　以下筆記如何在 Visual Studio 2013 建置 OpenCV 2.4.9 專案環境，我想這個安裝流程在 2.4.X 的版本應該都是適用，之後的版本應該也是大同小異，沒有很複雜。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用 Win32 Disk Imager 備份和燒錄 Raspberry Pi 的 SD 卡</title>
      <link>https://blog.jaycetyle.com/2014/09/win32-disk-imager-raspberry-pi-sd/</link>
      <pubDate>Sat, 27 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/2014/09/win32-disk-imager-raspberry-pi-sd/</guid>
      <description>&lt;p&gt;　　不少網站已經介紹過如何使用 Win32 Disk Imager 燒錄 Raspberry Pi 的 SD 卡。但實際上，這套軟體還有讀取 SD 卡的內容並轉成 img 檔的備份功能，玩 Pi 玩一玩怕把穩定的系統玩壞的時候，便可以利用此功能把現在的 SD 卡備份下來，真的出問題的話再重新燒進去就可以還原了，而且此軟體是 Windows 工具，對 Windows 使用者而言也相當方便親民。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Archive</title>
      <link>https://blog.jaycetyle.com/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blog.jaycetyle.com/archive/</guid>
      <description></description>
    </item>
  </channel>
</rss>
