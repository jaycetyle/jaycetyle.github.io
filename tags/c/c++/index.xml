<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on Jayce 的共享記憶體</title>
    <link>https://blog.jaycetyle.com/tags/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on Jayce 的共享記憶體</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sat, 13 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jaycetyle.com/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VS Code GNU Global 相依專案路徑設定</title>
      <link>https://blog.jaycetyle.com/2019/07/more-about-vscode-gnu-global/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2019/07/more-about-vscode-gnu-global/</guid>
      <description>&lt;p&gt;　　在 &lt;a href=&#34;https://blog.jaycetyle.com/2018/10/vscode-gnu-global/&#34;&gt;VS Code + GNU Global - 打造 Trace Linux Kernel 環境&lt;/a&gt; 這篇我有介紹我改造的 VS Code GNU Global 套件。當初會選擇 GNU Global 作為主要的 tagging engine，除了他的速度很快以外，還有另一個的原因是 GNU Global 具備將 tag files 分散在不同 Project 的功能，再透過相依性設定搜尋路徑。&lt;/p&gt;

&lt;p&gt;　　分散 Tag File 在某些大型專案非常有用，他可以有效加速 Tag 搜尋和更新的速度。另外他也支援將 tag files 放在專案目錄以外的地方，以下會分別介紹這兩個功能在 VS Code 中要如何設定。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 系統程式設計 - read()、write() 與 page cache</title>
      <link>https://blog.jaycetyle.com/2019/01/linux-read-write/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2019/01/linux-read-write/</guid>
      <description>&lt;p&gt;　　這篇延續 &lt;a href=&#34;https://blog.jaycetyle.com/2018/12/linux-fd-open-close/&#34;&gt;Linux 系統程式設計 - fd 及 open()、close() 系統呼叫&lt;/a&gt;，筆記 read()、write() 系統呼叫及 page cache 相關的部分。內容主要參考 &lt;a href=&#34;https://www.tenlong.com.tw/products/9789862769812&#34;&gt;Robert Love 的 Linux System Programming&lt;/a&gt; 一書。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 系統程式設計 - fd 及 open()、close() 系統呼叫</title>
      <link>https://blog.jaycetyle.com/2018/12/linux-fd-open-close/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2018/12/linux-fd-open-close/</guid>
      <description>&lt;p&gt;　　開始接觸 Linux Kernel 也有差不多一年的時間，最近開始有明顯地感覺到有某種瓶頸存在，仔細思考了一下覺得是底子不夠，所以決定從基礎來好好學習一下，再搭配核心程式碼來確認是否是看到的那樣。這篇主要筆記 file descriptor、open() 及 close() 系統呼叫相關的部分，主要參考 &lt;a href=&#34;https://www.tenlong.com.tw/products/9789862769812&#34;&gt;Robert Love 的 Linux System Programming&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VS Code &#43; GNU Global - 打造 Trace Linux Kernel 環境</title>
      <link>https://blog.jaycetyle.com/2018/10/vscode-gnu-global/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2018/10/vscode-gnu-global/</guid>
      <description>&lt;p&gt;　　Linux Kernel 是一個偉大的開源專案，同時也是相當龐大的專案，要 Trace 這麼大的專案總是要準備一點輔助工具才會有效率。這篇主要介紹使用 VS Code 編輯器，加上我改的 C/C++ GNU Global 套件來 Trace Linux Kernel，對一些大型的 C/C++ 專案也適用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[C/C&#43;&#43;] enum to string 的方法實作 (X Macro)</title>
      <link>https://blog.jaycetyle.com/2018/09/c-xmacro/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2018/09/c-xmacro/</guid>
      <description>&lt;p&gt;　　相信很多人很多時候都會想要把 enum 列舉的數值轉換成 string，方便寫出檔案或顯示到 UI 上，這種轉換的方法在很多高階語言，例如 C#、Java 等都有方法直接支援，但是 C/C++ 就沒這麼方便了。以下介紹幾種在 C++ 實作 enum 轉 string 的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VS Code &#43; ssh 樹莓派遠端除錯</title>
      <link>https://blog.jaycetyle.com/2018/04/vscode-ssh-debug/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2018/04/vscode-ssh-debug/</guid>
      <description>&lt;p&gt;　　在一個新的環境寫程式之前，我自己的習慣是一定要先摸一下除錯器 (debugger) 的使用，有好的除錯器輔助可以讓軟體開發省下非常多的時間。這篇主要筆記如何運用 VS Code 的 Native Debug 插件，直接遠端到樹莓派上面的 gdb 進行 C 語言的程式除錯，可以監控變數，設定中斷點，也可以按 F10 單步執行，對於其他 Linux 系統的 embedded system 只要能夠安裝 gdb 、 ssh 和掛載遠端目錄應該也都適用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>寫一個簡單、通用的 Makefile</title>
      <link>https://blog.jaycetyle.com/2018/01/simple-general-makefile/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2018/01/simple-general-makefile/</guid>
      <description>&lt;p&gt;　　用 GCC 想要 Build Code 的話，除了直接使用 gcc 以外，再來就是寫 Makefile 了。不過很多時候只是想要寫一個簡單的測試小程式或小工具，還要重新寫 Makefile 那就顯得相當麻煩。這篇筆記了一個簡單的通用 Makefile，只需要修改少數幾個地方就可以應付規模不大的程式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Linux 寫程式 - gcc 及 Makefile 教學筆記 (2)</title>
      <link>https://blog.jaycetyle.com/2015/01/linux-gcc-makefile-2/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2015/01/linux-gcc-makefile-2/</guid>
      <description>&lt;p&gt;　　根據之前提到的規則，我們可以讓 Makefile 再複雜一點，如下:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Linux 寫程式 - gcc 及 Makefile 教學筆記 (1)</title>
      <link>https://blog.jaycetyle.com/2015/01/linux-gcc-makefile/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2015/01/linux-gcc-makefile/</guid>
      <description>&lt;p&gt;　　剛從 Windows 跳到 Linux 的 Programmer 應該都會跟我遇到類似的問題吧，就是 Linux 到處都是看不懂的 Makefile，畢竟 Windows 沒有這種東西，在 Windows 裡，Makefile 的工作都由 IDE 代勞了，這裡不得不說 Visual Studio 真的是很強大的整合開發環境，會寵壞小孩。但現在要進到 Linux 的領域，就勢必要搞懂這個 Makefile 在做什麼，大概怎麼寫，不然會遇到蠻多障礙，而這篇就是筆記 Makefile 的使用方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio 2013 配置 OpenCV 2.4.9 專案環境</title>
      <link>https://blog.jaycetyle.com/2014/10/visual-studio-2013-opencv/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jaycetyle.com/2014/10/visual-studio-2013-opencv/</guid>
      <description>&lt;p&gt;　　以下筆記如何在 Visual Studio 2013 建置 OpenCV 2.4.9 專案環境，我想這個安裝流程在 2.4.X 的版本應該都是適用，之後的版本應該也是大同小異，沒有很複雜。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>